knitr::opts_chunk$set(echo = TRUE)
Crabs <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
head(Crabs)
Crabs$c4 <- ifelse(Crabs$color == 4, 1, 0) # indicator for color cat. 4
fit3 <- glm(y ~ width + c4, family=binomial, data=Crabs)
predict(fit3, data.frame(c4=1, width=mean(Crabs$width)), type="response")
predict(fit3, data.frame(c4=0, width=mean(Crabs$width)), type="response")
c4 <- ifelse(Crabs$color == 4, 1, 0) # indicator for color cat. 4
predict(fit3,data.frame(c4=mean(c4),width=quantile(Crabs$width)), type="resp")
library(mfx)
logitmfx(fit3, atmean=FALSE, data=Crabs) # with atmean=TRUE, finds
Crabs <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
head(Crabs)
#Crabs$color=as.factor(Crabs$color)
fit <- glm(y ~ width + factor(color), family=binomial, data=Crabs)
g=summary(fit)
crabs.fit1 = glm(y ~ width + factor(color), family=binomial, data=Crabs)
fit1 <- glm(y ~ width, family=binomial, data=Crabs)
summary(glm(y ~ width, family=binomial, data=Crabs))
library(car)
Anova(fit)
drop1(fit, test="Chisq")
anova(fit1, fit, test="LRT")
fit2 <- glm(y ~ width + color, family=binomial, data=Crabs)
summary(fit2) # color treated as quantitative with scores (1, 2, 3, 4)
drop1(fit2, test="Chisq")
anova(fit2, fit, test="LRT") # likelihood-ratio test comparing models
with(Crabs,
plot(jitter(width,5), y+(2.3-color)/40,
xlim=c(18,34.5), ylim=c(0,1),
xlab="Width", ylab="Satellites (Yes=1, No=0)"))
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[3]),
col=2, add=TRUE, lwd=2)
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[4]),
col=3, add=TRUE, lwd=2)
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[5]),
col=4, add=TRUE,lwd=2)
leg.txt <- c("med-light","medium","med-dark","dark")
legend("bottomright", leg.txt, pch=19,
col=1:4, text.col=1:41)
leg.txt <- c("med-light","medium","med-dark","dark")
legend("bottomright", leg.txt, pch=19,
col=1:4, text.col=1:41)
Crabs <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
head(Crabs)
#Crabs$color=as.factor(Crabs$color)
fit <- glm(y ~ width + factor(color), family=binomial, data=Crabs)
g=summary(fit)
crabs.fit1 = glm(y ~ width + factor(color), family=binomial, data=Crabs)
fit1 <- glm(y ~ width, family=binomial, data=Crabs)
summary(glm(y ~ width, family=binomial, data=Crabs))
library(car)
Anova(fit)
drop1(fit, test="Chisq")
anova(fit1, fit, test="LRT")
fit2 <- glm(y ~ width + color, family=binomial, data=Crabs)
summary(fit2) # color treated as quantitative with scores (1, 2, 3, 4)
drop1(fit2, test="Chisq")
anova(fit2, fit, test="LRT") # likelihood-ratio test comparing models
with(Crabs,
plot(jitter(width,5), y+(2.3-color)/40,
xlim=c(18,34.5), ylim=c(0,1),
xlab="Width", ylab="Satellites (Yes=1, No=0)"))
curve(plogis(coef(fit)[1] + coef(fit)[2]*x), col=1, add=TRUE, lwd=2)
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[3]),
col=2, add=TRUE, lwd=2)
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[4]),
col=3, add=TRUE, lwd=2)
curve(plogis(coef(fit)[1] +coef(fit)[2]*x+ coef(fit)[5]),
col=4, add=TRUE,lwd=2)
leg.txt <- c("med-light","medium","med-dark","dark")
legend("bottomright", leg.txt, pch=19,
col=1:4, text.col=1:41)
leg.txt <- c("med-light","medium","med-dark","dark")
legend("bottomright", leg.txt, pch=19,
col=1:4, text.col=1:41)
head(Crabs)
#Crabs$color=as.factor(Crabs$color)
fit <- glm(y ~ width + factor(color), family=binomial, data=Crabs)
g=summary(fit)
g
crabs.fit1 = glm(y ~ width + factor(color), family=binomial, data=Crabs)
fit1 <- glm(y ~ width, family=binomial, data=Crabs)
summary(glm(y ~ width, family=binomial, data=Crabs))
knitr::opts_chunk$set(echo = TRUE)
#import data
data = read.csv("~/Desktop/spring23/math697/rcode/facebook/fbdata.csv")
# look at the data
glimpse(data)
knitr::opts_chunk$set(echo = TRUE)
# packages
library(dplyr)
library(tidyverse)
library(heatmaply)
library(MASS)
library(DataExplorer)
library(Hmisc)
library(polycor)
#import data
data = read.csv("~/Desktop/spring23/math697/rcode/facebook/fbdata.csv")
# look at the data
glimpse(data)
# look for unique values in 'age' column
unique(data$age)
unique(data$xyz_campaign_id)
# create copy of data for editing
dataCopy = data
# replace character string age ranges with number
dataCopy$age[dataCopy$age == '30-34'] = 32
dataCopy$age[dataCopy$age == '35-39'] = 37
dataCopy$age[dataCopy$age == '40-44'] = 42
dataCopy$age[dataCopy$age == '45-49'] = 47
# convert variable to integer
dataCopy$age <- as.integer(dataCopy$age)
# let's just check that age variable now
unique(dataCopy$age)
str(dataCopy$age)
# convert gender variable to integer
dataCopy$gender[dataCopy$gender == 'M'] = 0
dataCopy$gender[dataCopy$gender == 'F'] = 1
dataCopy$gender = as.integer(dataCopy$gender)
# abbreviate some variable names
dataCopy = dataCopy %>%
rename(xyzCampId = xyz_campaign_id, fbCampId = fb_campaign_id, impr = Impressions,
conv = Total_Conversion, appConv = Approved_Conversion)
# look at the data after changes
glimpse(dataCopy)
fitSnapP <- lm(Spent ~ Clicks , data = dataCopy)
# Take a look on summary of the model
summary(fitSnapP)
fitSnapP <- lm(Spent ~ Clicks , data = dataCopy)
# Take a look on summary of the model
predict(fitSnapP)
mean((dataCopy$Spent-predict(fitSnapP))^2)
fit = lm(Spent ~ Clicks , data = dataCopy)
# Take a look on summary of the model
pre=predict(fit)
mean((dataCopy$Spent-pre(fit))^2)
fit = lm(Spent ~ Clicks , data = dataCopy)
# Take a look on summary of the model
pre=predict(fit)
mean((dataCopy$Spent-predict(fit))^2)
# Fitting Classification Trees on Carseats data
library(tree)
library(ISLR)
attach(Carseats)
View(Carseats)
High=ifelse(Sales<=8,"No","Yes")
#merge High with the rest of the Carseats data
Carseats=data.frame(Carseats,High)
# Define the significance level
alpha <- 0.05
# Define the function to calculate the probability
prob_func <- function(n) {
p <- 1 - pchisq(q = qchisq(p = 1 - alpha, df = n - 1) * 2 / n, df = n - 1)
return(p)
}
# Find the smallest value of n that satisfies the condition
n <- 2
while (prob_func(n) < 0.95) {
n <- n + 1
}
cat("The smallest value of n is:", n, "\n")
# Define the significance level
alpha <- 0.05
# Define the function to calculate the probability
prob_func <- function(n) {
p <- 1 - pchisq(q = qchisq(p = 1 - alpha, df = n - 1) * 2 / n, df = n - 1)
return(p)
}
while (prob_func(n) < 0.95) {
n <- n + 1
}
cat("The smallest value of n is:", n, "\n")
# Define the significance level
alpha <- 0.05
# Define the function to calculate the probability
prob_func <- function(n) {
p <- 1 - pchisq(q = qchisq(p = 1 - alpha, df = n - 1) * 2 / n, df = n - 1)
return(p)
}
while (prob_func(n) < 0.95) {
n <- n + 1
}
cat("The smallest value of n is:", n, "\n")
# Define the significance level
alpha <- 0.05
# Define the function to calculate the probability
prob_func <- function(n) {
p <- pchisq(q = 2 * (n - 1), df = n - 1, lower.tail = FALSE)
return(p)
}
# Set initial value of n
n <- 2
# Iterate until probability is at least 0.95
while (prob_func(n) < 1 - alpha) {
n <- n + 1
}
